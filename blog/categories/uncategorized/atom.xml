<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: uncategorized | Fragmented Memory]]></title>
  <link href="http://www.fragmentedmemory.com/blog/categories/uncategorized/atom.xml" rel="self"/>
  <link href="http://www.fragmentedmemory.com/"/>
  <updated>2014-07-13T13:41:54+01:00</updated>
  <id>http://www.fragmentedmemory.com/</id>
  <author>
    <name><![CDATA[Garry Bodsworth]]></name>
    <email><![CDATA[blog@fragmentedmemory.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting More Battery Life Out Of A Linux Laptop]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2011/01/09/getting-more-battery-life-out-of-a-linux-laptop/"/>
    <updated>2011-01-09T00:00:00+00:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2011/01/09/getting-more-battery-life-out-of-a-linux-laptop</id>
    <content type="html"><![CDATA[<p>On my ASUS UL20A out of the box power management is pretty good but it still does not reach the heady climbs of Windows.  In running [powertop][1] it gave a lot of useful suggestions like SATA, soundcard and USB, but when you apply these you only get it for that session.  You need some way of making these power saving settings permanent.</p>

<p>Here are a few power management scripts that have increased my battery life by about 20-40% as a rough estimate.  The best way to increase battery life dramatically is to reduce the brightness of your monitor which obviously diminishes the usefulness of your display at a certain point.</p>

<p>Here are the files you need to create (all derived from [this forum post][2]).</p>

<p><strong>vm_dirty_writeback</strong><br/>
`<br />
[sourcecode language=&ldquo;bash&rdquo;]<br /></p>

<h1>!/bin/sh</p></h1>

<p>path_dwc="/proc/sys/vm/dirty_writeback_centisecs"<br />
val=500</p>


<p>case "$1" in<br />
    true)<br />
        echo "**VM dirty writeback 15 seconds"<br />
        val=1500<br />
        ;;<br />
    false)<br />
        echo "**VM dirty writeback 5 seconds"<br />
        val=500<br />
        ;;<br />
esac</p>


<p># 5 seconds on AC, 15 seconds on battery</p>


<p>if [ -w "$path_dwc" ] ; then<br />
    echo $val > $path_dwc<br />
fi</p>


<p>exit 0<br />
[/sourcecode]<br />
`

**link\_pm\_policy**  
`<br />
[sourcecode language="bash"]<br />
#!/bin/sh</p>


<p>path_host0="/sys/class/scsi_host/host0/link_power_management_policy"<br />
path_host1="/sys/class/scsi_host/host1/link_power_management_policy"<br />
path_host2="/sys/class/scsi_host/host2/link_power_management_policy"<br />
path_host3="/sys/class/scsi_host/host3/link_power_management_policy"<br />
val=max_performance</p>


<p>case "$1" in<br />
    true)<br />
        echo "**lpm policy powersave ON"<br />
        val=min_power<br />
        ;;<br />
    false)<br />
        echo "**lpm policy powersave OFF"<br />
        val=max_performance<br />
        ;;<br />
esac</p>


<p># max_performance on AC min_power on battery</p>


<p>if [ -w "$path_host0" ] ; then<br />
    echo $val > $path_host0<br />
fi</p>


<p>if [ -w "$path_host1" ] ; then<br />
    echo $val > $path_host1<br />
fi</p>


<p>if [ -w "$path_host2" ] ; then<br />
    echo $val > $path_host2<br />
fi</p>


<p>if [ -w "$path_host3" ] ; then<br />
    echo $val > $path_host3<br />
fi</p>


<p>exit 0<br />
[/sourcecode]<br />
`

**snd_suspend**  
`<br />
[sourcecode language="bash"]<br />
#!/bin/sh</p>


<p>path_dwc="/sys/module/snd_hda_intel/parameters/power_save"<br />
val=1</p>


<p>case "$1" in<br />
    true)<br />
        echo "**Intel HD sound suspend"<br />
        val=1<br />
        ;;<br />
    false)<br />
        echo "**Intel HD sound on power"<br />
        val=0<br />
        ;;<br />
esac</p>


<p># 5 seconds on AC, 15 seconds on battery</p>


<p>if [ -w "$path_dwc" ] ; then<br />
    echo $val > $path_dwc<br />
fi</p>


<p>exit 0<br />
[/sourcecode]<br />
`

**network_powersave**  
`<br />
[sourcecode language="bash"]<br />
#!/bin/sh</p>


<p>if [ "$1" = "true" ]; then<br />
            iwconfig wlan0 power on<br />
fi</p>


<p>if [ "$1" = "false" ]; then<br />
            iwconfig wlan0 power off<br />
fi</p>


<p>exit 0<br />
[/sourcecode]<br />
`

**usb_autosuspend**  
`<br />
[sourcecode language="bash"]<br />
#!/bin/bash<br />
if [ "$1" = "true" ]; then</p>


<p>  for i in /sys/bus/usb/devices/*/power/level; do<br />
    [ "$(cat $i)" = "auto" ] && continue<br />
    echo "auto" > $i<br />
  done</p>


<p>  for i in /sys/bus/usb/devices/*/power/autosuspend; do<br />
    [ "$(cat $i)" -ge 0 2>/dev/null ] && continue<br />
    echo "2" > $i<br />
  done</p>


<p><p>fi<br />
[/sourcecode]<br />
`</p>

<p>Then do:</p>

<ul>
<li>Put all the files above in a directory and cd into it.</li>
<li>chmod 755 *</li>
<li>sudo install * /usr/lib/pm-utils/power.d/</li>
<li>Do a reboot here.</li>
</ul>


<p>You can check how it is running by looking at the log in /var/log/pm-powersave.log</p>

<p> [1]: <a href="http://www.lesswatts.org/projects/powertop/">http://www.lesswatts.org/projects/powertop/</a>
 [2]: <a href="http://ubuntuforums.org/showthread.php?t=1326333">http://ubuntuforums.org/showthread.php?t=1326333</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asus UL20A &#8211; Hints And Tips For Running Linux]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2011/01/09/asus-ul20a-hints-and-tips-for-running-linux/"/>
    <updated>2011-01-09T00:00:00+00:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2011/01/09/asus-ul20a-hints-and-tips-for-running-linux</id>
    <content type="html"><![CDATA[<p>My MacBook Pro developed the <a href="http://support.apple.com/kb/TS2377">nVidia graphics failure problem</a> and I got the motherboard replaced, it has never been the same since and when I asked I basically had no warranty for it. So after three-and-a-half years I decided to buy myself a new laptop. Lacking the riches required for another Apple I decided to go where I am really most comfortable &#8211; Linux. So after a lot of research and fingers crossing I picked up an <a href="http://www.amazon.com/UL20A-A1-Light-12-1-Inch-Silver-Laptop/dp/B002PAQXAE">Asus UL20A</a> off of eBay for 318 quid including postage.</p>

<p>The specs are as follows:</p>

<ul>
<li>Core2Duo SU7300 (dual core 1.3GHz)</li>
<li>12 inch display at 1366&#215;768</li>
<li>Quoting something like 8 hours battery life.</li>
<li>4GB RAM (upgraded by me for 25 quid)</li>
<li>60GB solid state drive (upgraded by me for 95 quid) &#8211; an OCZ Vertex 2E with the respected Sandisk controller.</li>
</ul>


<p>The point of this post, however, is not to review a piece of hardware, but to get Linux working flawlessly on it.</p>

<p><strong>Linux Mint 10</strong></p>

<p>I decided to use<a href="http://www.linuxmint.com/"> Linux Mint 10</a> (Ubuntu base), this is instead of stock Ubuntu which I find very cluttered on initial install and also requires me to do loads of fiddling to get a normal looking and clean desktop environment.  Linux Mint 10 is based on the latest Ubuntu but presents the user a very nicely set up session after the first install.  The desktop is uncluttered, there is only one panel at the bottom, and theme is head and shoulders above the Ubuntu default.</p>

<p>Linux Mint does have a Debian based edition which I will switch to later but the packages are a lot further behind the latest Ubuntu and since I was going to use some more modern features for the SSD I would have to have done a lot more hacking.</p>

<p><strong>Installing</strong></p>

<p>I partitioned the SSD the following way:</p>

<ul>
<li>256MB ext2 /boot partition</li>
<li>4.1GB /swap partition</li>
<li>15GB btrfs / partition</li>
<li>40GB btrfs /home partition</li>
</ul>


<p>I decided to use btrfs because it is the latest and greatest available file system for Linux.  This means it has things like TRIM support for SSDs and can do cool stuff like snapshots, but this also requires a newer kernel for better support hence not using the Linux Mint Debian Edition.</p>

<p>The ext2 boot partition is required as you can&#8217;t boot directly from btrfs according to the information I found out there.  The swap partition is memory + 100MB for supporting hibernate.  The main partition is separate from the home partition &#8211; <strong>this is very important when you use Ubuntu</strong>.  Because Ubuntu does releases every six months you can attempt upgrades, but I have seen and experienced this failing with catastrophic consequences.  Luckily having a separate home partition means you can tell Ubuntu to reinstall to the main partition but just mount and use you home directory without formatting it.</p>

<p>Installation took me about 10-15 minutes before I was there in my freshly installed desktop.  Now, almost everything works straight out of the box, it is case of tweaking to get some of the more hidden features working.</p>

<p><strong>Two Finger Scrolling</strong></p>

<p>Two finger scrolling on the Synaptics touchpad requires a little bit of tweaking.   Create a file called /usr/share/X11/xorg.conf.d/50-twofingerscroll.conf with the folling contents:<br/>
<code>&lt;br /&gt;
Section "InputClass"&lt;br /&gt;
Identifier "touchpad catchall"&lt;br /&gt;
MatchProduct "SynPS/2 Synaptics TouchPad"&lt;br /&gt;
Option "VertTwoFingerScroll" "on"&lt;br /&gt;
Option "HorizTwoFingerScroll" "on"&lt;br /&gt;
Option "EmulateTwoFingerMinW" "5"&lt;br /&gt;
Option "EmulateTwoFingerMinZ" "48"&lt;br /&gt;
EndSection</code></p>

<p>Then start up<em> gconf-editor</em> and change<em> /desktop/gnome/peripherals/touchpad/scroll_method</em> to the value <em>2</em>.</p>

<p>Now you have two finger scrolling working and also two finger right click!</p>

<p><strong>The LCD Brightness Keys</strong></p>

<p>This requires a small change to your boot settings so that you can use the function keys to set the screen brightness.</p>

<p>Edit <em>/etc/default/grub</em> so that the line with <em>GRUB_CMDLINE_LINUX = &#8220;&#8221;</em> says:<br/>
<code>&lt;br /&gt;
GRUB_CMDLINE_LINUX="acpi_backlight=vendor"</code></p>

<p>Then run <em>sudo update-grub </em>and reboot.</p>

<p><strong>Power Settings</strong></p>

<p>To help improve battery life install powertop by using <em>sudo apt-get install powertop</em> then run <em>sudo powertop</em> and follow its instructions.  You should be able to help squeeze precious minutes out of your battery.</p>

<p><strong>Mistakes</strong></p>

<p>I did attempt installing the latest kernel along with the latest graphics drivers.  This was mainly for graphical hacking and trying out newer btrfs options.  This is a big mistake.  For a start the battery monitoring stops working although I managed to solve that, then shutdown stopped working consistently.  So for all the benefits don&#8217;t bother if you prefer your system to be properly functioning.</p>

<p><strong>What I Did Next&#8230;.</strong></p>

<p>I always use <a href="http://ubuntu-tweak.com/">Ubuntu Tweak</a> and it works on Linux Mint 10.  This allows you to get some more interesting packages and also update to cutting edge versions.</p>

<p>There is something I don&#8217;t like about Google Chrome despite its super-speed, so I always go back to Firefox.  Unfortunately distros currently use 3.6 but I have been using 4.0 for about six months, it is much quicker, better looking and more robust.  Through Ubuntu Tweak enable the Minefield repositories and get it.  Also install the Nightly Tools Addon to help get your Addons all working.</p>

<p>I install ttf-droid fonts normally and switch all my desktop to use that as it gives more space, but for people who don&#8217;t like small fonts you probably should avoid it.</p>

<p>I have also installed and am running the theme from the <a href="http://www.elementary-project.com/">elementary project</a> which gives a less Minty user interface for Linux Mint.  It&#8217;s purely aesthetical, although the elementary Nautilus file browser is much better than the default.</p>

<p><strong>All In All</strong></p>

<p>At the end of it I have a fully working Linux laptop that boots in less than 20 seconds and shuts down in about a second.  It is easy to use and responsive which makes me really happy.  From what I have been trying to work out the ASUS laptops seem to have fairly decent Linux support.</p>

<p>Next up I am going to have to get hacking on <a href="http://www.libimobiledevice.org/">libimobiledevice</a> because I have an iPhone and I would like to avoid running updates via a virtual machine or something.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python is beautifully over-engineered]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2010/08/12/python-is-beautifully-over-engineered/"/>
    <updated>2010-08-12T00:00:00+01:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2010/08/12/python-is-beautifully-over-engineered</id>
    <content type="html"><![CDATA[<p>I could have called this &#8220;Don&#8217;t re-invent the wheel&#8221;. Sometimes the Python standard library really surprises me because some bits are very over-engineered, but in a really good way. First time I realised this was when I was working on what became <a href="http://github.com/garrybodsworth/coda_network">coda_network</a> as most people solving the proxy problem and other downloading issues just write a new network library, but there are some really handy base classes to derive from to solve it. Admittedly it did require some bug fixing along the way, but it was kind of worthwhile.</p>

<p>In coda_network I&#8217;ve got a mini proxy using ForkingMixin to do a process per download bypassing a lot of GIL based multithreading pain. I needed some more multi processing support for some shared state and possibly locking. So I started trying to do a MultiprocessingMixIn for the SocketServer/TCPServer/BaseHTTPServer. I thought &#8220;this is easy just rip off the threading one since they share the same interface&#8221;. That worked really well for general use but when I started putting the system under severe load the process cleanup started going wonky.</p>

<p>Eventually I think I got it working using this code:</p>

<pre lang="PYTHON" line="1" file="MultiProcessingMixin.py" colla="+">class MultiprocessingMixIn:
    """Mix-in class to handle each request in a new process."""

    # Decides how process will act upon termination of the
    # main process
    daemon_processes = False

    def process_request_process(self, request, client_address):
        """
        Same as in BaseServer but as a thread.
        In addition, exception handling is done here.
        """
        try:
            # Actually do the request
            self.finish_request(request, client_address)
        except:
            # XXX: will this work with multiprocessing correctly?
            self.handle_error(request, client_address)
        finally:
            # Close the socket request
            self.close_request(request)

    def process_request(self, request, client_address):
        """Start a new thread to process the request."""
        t = multiprocessing.Process(target = self.process_request_process,
                             args=(request, client_address))
        if self.daemon_processes:
            t.daemon = True
        t.start()
        # Now we close the parent request socket because the child process
        # is now responsible for it
        self.close_request(request)
</pre>


<p>The important bit is closing the request in the parent after the child process has started since it takes responsibility for it then.</p>

<pre lang="PYTHON" line="1" colla="+">class ProxyServer(MultiprocessingMixIn, BaseHTTPServer.HTTPServer):
    pass

proxy = ProxyServer(address, HttpResponder)
proxy.serve_forever()
</pre>


<p>I&#8217;ve probably missed a couple of bits (like making sure the handle_error does what is expected) but this is at least a good starting point&#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A coda_network update]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2010/08/03/a-coda_network-update/"/>
    <updated>2010-08-03T00:00:00+01:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2010/08/03/a-coda_network-update</id>
    <content type="html"><![CDATA[<p>I have been making a slow trickle of commits to <a href="http://github.com/garrybodsworth/coda_network">coda_network</a> as I need various features. The httplib.py and urllib2.py have been used in the field for a while in a variety of networks and I am pleased with how it has gone (now that means I need to get these changes upstream when I have a chance).</p>

<p>So what changes have gone in?<br/>
* A skeletal mock proxy server that can fake HTTP and HTTPS requests. This will perform the basis of unit testing.<br/>
* Fix a bit where TCP keepalive failed to happen over HTTPS.<br/>
* Implemented MD5-sess digest authentication which seems to be what IIS Windows servers use.<br/>
* Added an authentication handler for OAuth.</p>

<p>The authentication handler for OAuth was the most work. Essentially I had to extract the OAuth logic from <a href="http://github.com/simplegeo/python-oauth2">oauth2</a> and remove all the close coupling with httplib. This then means you can have an OAuth handler in the urllib2 world of Python and do it through proxies and the suchlike. Your server does need to return a 401 rather than the ones I have seen that get a 500 internal server error when the request is made without authorisation.</p>

<p>To get it working I cheated and reused username and password because they have little meaning in the OAuth world. So you end up with something like this (you can skip the token part if you don&#8217;t have it yet):<br/>
`<br /></p>

<pre><code>password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()&lt;br /&gt;
password_mgr.add_password(None,&lt;br /&gt;
                          'http://oauthprotected.com',&lt;br /&gt;
                          KeySecret('consumer_key', 'consumer_secret'),&lt;br /&gt;
                          KeySecret('token', 'token_secret'),&lt;br /&gt;
                          )&lt;br /&gt;
auth_handler = oauth_auth.HTTPOauthAuthHandler(password_mgr)&lt;br /&gt;
</code></pre>

<p>`</p>

<p>It is all done entirely in HTTP headers and there is no option for GET or POST parameters.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How (not to) write notes at Europython 2010]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2010/08/02/how-not-to-write-notes-at-europython-2010/"/>
    <updated>2010-08-02T00:00:00+01:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2010/08/02/how-not-to-write-notes-at-europython-2010</id>
    <content type="html"><![CDATA[<p>I was told my write-up of Europython was useless without seeing the actual pictures I was drawing when I should have been writing more notes&#8230;. I wasn&#8217;t necessarily bored, just bitten by the drawing bug once again.</p>

<p>First up I started with a simple Optimus Prime to pass the time.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854492950/" title="Europython notes page 1 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4116/4854492950_8742ed17cc.jpg" width="500" height="374" alt="Europython notes page 1" /></a></p>

<p>Then Optimus Prime needed someone to fight, so Megatron popped in.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854526694/" title="Europython notes page 2 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4118/4854526694_3eb8316d50.jpg" width="500" height="374" alt="Europython notes page 2" /></a></p>

<p>But Megatron was upgraded into the insane killing machine of Galvatron.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4853912621/" title="Europython notes page 3 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4075/4853912621_87b798271d.jpg" width="500" height="374" alt="Europython notes page 3" /></a></p>

<p>Hot Rod (for some reason channelling David Bowie) is needed to keep Galvatron in check.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4853917113/" title="Europython notes page 4 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4102/4853917113_983454eb10.jpg" width="500" height="374" alt="Europython notes page 4" /></a></p>

<p>The chaos bringer Unicron keeps a close eye on testing in planet form.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854541782/" title="Europython notes page 5 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4101/4854541782_669a1cd004.jpg" width="500" height="374" alt="Europython notes page 5" /></a></p>

<p>A tough looking Iron Man decided to get in on the act.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854547700/" title="Europython notes page 6 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4137/4854547700_93a280ab95.jpg" width="500" height="374" alt="Europython notes page 6" /></a></p>

<p>Then we go back to a slightly better rendered Optimus Prime.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854554072/" title="Europython notes page 7 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4136/4854554072_afeee41d80.jpg" width="500" height="374" alt="Europython notes page 7" /></a></p>

<p>A childhood creation of an old friend is Thunder Supreme &#8211; the city robot.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854560034/" title="Europython notes page 8 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4076/4854560034_df16aaa00f.jpg" width="500" height="374" alt="Europython notes page 8" /></a></p>

<p>Robocop helps organise a Python Code Dojo.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4853952247/" title="Europython notes page 10 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4093/4853952247_4b48eeb888.jpg" width="500" height="374" alt="Europython notes page 10" /></a></p>

<p>Judge Dredd pronounces sentence on Twisted.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4853957873/" title="Europython notes page 11 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4137/4853957873_2606e15a56.jpg" width="500" height="374" alt="Europython notes page 11" /></a></p>

<p>Death&#8217;s Head slightly sketchy, yes?<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4854581470/" title="Europython notes page 12 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4095/4854581470_b9d49739fe.jpg" width="500" height="374" alt="Europython notes page 12" /></a></p>

<p>Death&#8217;s Head II was fighting at keeping Windows at bay. But I fear he may not be powerful enough.<br/>
<a href="http://www.flickr.com/photos/garrybodsworth/4853968351/" title="Europython notes page 13 by Garry Bodsworth, on Flickr"><img src="http://farm5.static.flickr.com/4076/4853968351_89285358dd.jpg" width="500" height="374" alt="Europython notes page 13" /></a></p>
]]></content>
  </entry>
  
</feed>
