<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cam | Fragmented Memory]]></title>
  <link href="http://www.fragmentedmemory.com/blog/categories/cam/atom.xml" rel="self"/>
  <link href="http://www.fragmentedmemory.com/"/>
  <updated>2014-07-13T13:41:54+01:00</updated>
  <id>http://www.fragmentedmemory.com/</id>
  <author>
    <name><![CDATA[Garry Bodsworth]]></name>
    <email><![CDATA[blog@fragmentedmemory.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PTC Acquires NC Graphics]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2007/05/17/ptc-acquires-nc-graphics/"/>
    <updated>2007-05-17T18:09:00+01:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2007/05/17/ptc-acquires-nc-graphics</id>
    <content type="html"><![CDATA[<div class='post'>
Part of the reason blogging has been so light in recent months is that work has been taking up more time than usual.  Now at least it is official.<br /><br />The company I work for, <a href="http://www.ncgraphics.net">NC Graphics</a> has been acquired by <a href="http://www.ptc.com">PTC (Parametric Technology Corporation)</a>.  You can see the press release <a href="http://www.ptc.com/appserver/wcms/standards/textsub.jsp?&im_dbkey=51168&icg_dbkey=21">here</a> and some additional information is available <a href="http://www.ptc.com/company/ncgraphics/index.htm">here</a>.<br /><br />Obviously it is all only of interest if you know me, but at least it will explain what I am doing when I change my blog summary.  Fingers crossed it will be a good move.  This has all been very tightly kept under wraps so it probably surprises quite a few people.  It has been surprising that noone in this entire period has asked me about it since CAM really is quite a small industry.<br /><br />And on a related note - Julian Todd and Martin Dunschen are ex-NC Graphics employees with a CAM blog linked to on the side panel to your right.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAM stuff]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2007/01/25/cam-stuff/"/>
    <updated>2007-01-25T20:14:00+00:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2007/01/25/cam-stuff</id>
    <content type="html"><![CDATA[<div class='post'>
My day job is spent writing <a href="http://en.wikipedia.org/wiki/Computer-aided_manufacturing">CAM software</a>.  There is a great little hacking site called <a href="http://www.hackaday.com">Hackaday</a>.  Those two sentences may look completely unrelated but it has some great articles about making your own tools (CNC machines) to do machining.<br /><br />Here is a list of CAM related articles:<br /><a href="http://www.hackaday.com/2006/07/12/how-to-build-your-own-cnc-mill/">How to build your own CNC mill</a><br /><a href="http://www.hackaday.com/2006/11/12/make-a-badass-cnc-mill/">Make a badass CNC mill</a><br /><a href="http://www.hackaday.com/2006/12/08/fab-home/">Fab@Home</a><br /><a href="http://www.hackaday.com/2007/01/01/snowboard-cnc-machine/">Snowboard CNC machine</a><br /><br />Fab@home looks really interesting as it is open-source and it is planned to manufacture itself.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>plaasjaapie</div>
<div class='content'>
If you find fab@home impressive you might also want to take at look at the RepRap project out of the University of Bath in the UK...<br /><br />http://reprap.org<br /><br />Their soon-to-be released machine is also open source, has a proper plastics extruder presently qualified for polycapralactone which can make usuable, hard objects.  Whereas the fab@home machine costs $2,400 for parts, the RepRap Darwin is on track to cost no more than $400. <br /><br />A spinoff of the RepRap project, Tommelise, is focussed on the American parts environment and uses somewhat different technology and a different control strategy.  It's also an open source specification will let anybody with a few hand tools and primitive woodworking skills bootstrap themselves into 3D fabrication for about $150. Tommelise's extruder is qualified for polycapralactone and is presently being qualified as well for both high density polypropylene (HDPE, the stuff your plastic cutting board is made of) and polypropylene (HPP, the stuff your coffee maker and plastic electric kettle is made of).  You can keep an eye on the Tommelise project at...<br /><br />http://3dReplicators.com<br /><br />Have fun!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Development - Meshes And Curvature]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2006/12/11/development-meshes-and-curvature/"/>
    <updated>2006-12-11T22:08:00+00:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2006/12/11/development-meshes-and-curvature</id>
    <content type="html"><![CDATA[<div class='post'>
I've been racking my brains recently about triangle meshes and curvature.  The problem with triangle meshes is that they don't really want to have decent normals defined for them, especially if your triangles have inflections between them from the generation.<br /><br />Someone who is much better than me at geometry pointed me at a really good article about normals and curvature from arbitrary meshes.  The article is <a href="http://www.cs.princeton.edu/gfx/pubs/_2004_ECA/index.php">Estimating Curvatures and Their Derivatives on Triangle Meshes</a>.<br /><br />There are implementations of the ideas in the article in <a href="http://www.cs.princeton.edu/gfx/proj/trimesh2/">trimesh2</a>.  It's worthwhile taking a look at the source code (it's in C/C++) and is fairly self-explanatory if not optimal.<br /><br />Calculating the normal on an arbitrary mesh is fairly simple if you don't want to be accurate in the slightest.  Just take the average of the triangles that share the point.  This works fairly well if your triangles do not have inflections and they are divided into separate surfaces (or faces depending on your terminology).  The idea behind this paper is to look at regions of points and to get the average of these, but weight them for their distance from the point you are attempting to calculate.<br /><br />If you store this data it is only a one time calculation hit, so it will not slow down your program.  This type of calculation is perfect for 3D rendering, although I need to see the overall quality in order to determine if it can be used for applications requiring more accurate results like CAD/CAM.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAM Development]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2006/12/03/cam-development/"/>
    <updated>2006-12-03T19:15:00+00:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2006/12/03/cam-development</id>
    <content type="html"><![CDATA[<div class='post'>
This week I have been a bit light on the blogging.  The main reason for this is that I was away in Germany with work.  A little show called <a href="http://www.euromold.com/english/">EuroMold</a>, it is the biggest CAD/CAM/CAE (and more engineering type stuff) show in Europe, so all the vendors are there demonstrating and giving away free stuff.<br /><br />I saw the guys behind <a href="http://www.freesteel.co.uk">FreeSteel</a>, who have put together their own set of algorithms (with the main one being Adaptive Clearing) which they own and licence to anyone who wants to use them for a very reasonable price.  Julian has put <a href="http://www.freesteel.co.uk/wpblog/?p=115">his write-up of EuroMold on his blog</a>.<br /><br />What you tend to notice about the engineering software industry, is that noone seems to excel, and it is very insular.  Companies don't talk to eachother, developers don't talk to eachother (even though there isn't a huge number of CAM developers in the world), there are no libraries out there that really help when it comes to developing CAM software when it comes down to the nitty gritty of machining.<br /><br />What I noticed about the software on display at EuroMold, is it all looked mostly the same. The OpenGL rendering looked excellent on some packages but the rest of the user interface was poor in comparison.  Also some tended to make the same mistakes in the user interface (as the default behaviour of code generators tends to leave some holes).  Most demonstrations were done with the standard Windows theme so it all looked like the 1990s running on Windows 95...  A bit of a pity since I have sent a couple of weeks tweaking <a href="http://www.ncgraphics.co.uk/">DEPOCAM</a> for Windows Vista, so it looks good on that platform.<br /><br />With most of the applications, they are getting more and more functionality, and doing more and more in one place.  This tends to make for cluttered applications.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CAM Development]]></title>
    <link href="http://www.fragmentedmemory.com/blog/2006/11/27/cam-development/"/>
    <updated>2006-11-27T20:24:00+00:00</updated>
    <id>http://www.fragmentedmemory.com/blog/2006/11/27/cam-development</id>
    <content type="html"><![CDATA[<div class='post'>
In my job I develop CAM (Computer Aided Machining) software.  To be honest there are very few decent resources on the web for it and it is a very closed development arena.<br /><br />There are some people out there trying to change this.  There are two developers (who I used to work with) called Julian Todd and Martin Dunschen who believe in open-ness in development.  They have a great little blog <a href="http://www.freesteel.co.uk/wpblog/index.php">here</a>.  You can also try out the online version of their <a href="http://www.freesteel.co.uk/">machining algorithm</a>.</div>

]]></content>
  </entry>
  
</feed>
